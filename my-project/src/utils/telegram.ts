// –°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram
import { API_CONFIG, getTelegramApiUrl } from '../config/api';

const BOT_TOKEN = API_CONFIG.TELEGRAM.BOT_TOKEN;
const ADMIN_CHAT_ID = API_CONFIG.TELEGRAM.ADMIN_CHAT_ID;
const TELEGRAM_API_URL = API_CONFIG.TELEGRAM.API_URL;

interface TelegramMessage {
  text: string;
  parse_mode?: 'HTML' | 'Markdown';
}

async function sendTelegramMessage(message: TelegramMessage): Promise<boolean> {
  try {
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram...');
    
    const params = new URLSearchParams({
      chat_id: ADMIN_CHAT_ID,
      text: message.text,
      parse_mode: message.parse_mode || 'HTML',
    });

    const response = await fetch(`${TELEGRAM_API_URL}/sendMessage?${params}`, {
      method: 'GET',
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', response.status, response.statusText, errorText);
      return false;
    }

    const result = await response.json();
    console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram:', result);
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', error);
    return false;
  }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è Telegram
export async function sendOrderToTelegram(orderData: {
  orderId: string;
  customerName: string;
  customerPhone: string;
  deliveryMethod: 'delivery' | 'pickup';
  address?: string;
  comment?: string;
  items: Array<{
    name: string;
    quantity: number;
    price: number;
  }>;
  total: number;
}): Promise<boolean> {
  const itemsList = orderData.items
    .map(item => `‚Ä¢ ${item.name} √ó ${item.quantity} = ${item.price * item.quantity} TJS`)
    .join('\n');

  const deliveryInfo = orderData.deliveryMethod === 'delivery' 
    ? 'üöö –î–æ—Å—Ç–∞–≤–∫–∞' 
    : 'üì¶ –°–∞–º–æ–≤—ã–≤–æ–∑';

  const message = {
    text: `
üÜï <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó #${orderData.orderId}</b>

üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> ${orderData.customerName}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${orderData.customerPhone}
${deliveryInfo}
${orderData.address ? `üìç <b>–ê–¥—Ä–µ—Å:</b> ${orderData.address}` : ''}
${orderData.comment ? `üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> ${orderData.comment}` : ''}

üìã <b>–ó–ê–ö–ê–ó:</b>
${itemsList}

üí∞ <b>–ò–¢–û–ì–û: ${orderData.total} TJS</b>

‚è∞ –í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞: ${new Date().toLocaleString('ru-RU', { timeZone: 'Asia/Dushanbe' })}
    `.trim(),
    parse_mode: 'HTML' as const,
  };

  return await sendTelegramMessage(message);
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Telegram
export async function sendReservationToTelegram(reservationData: {
  customerName: string;
  customerPhone: string;
  customerEmail?: string;
  date: string;
  time: string;
  guests: number;
  comment?: string;
}): Promise<boolean> {
  const message = {
    text: `
üéâ <b>–ù–û–í–û–ï –ë–†–û–ù–ò–†–û–í–ê–ù–ò–ï</b>

üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> ${reservationData.customerName}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${reservationData.customerPhone}
${reservationData.customerEmail ? `üìß <b>Email:</b> ${reservationData.customerEmail}` : ''}

üìÖ <b>–î–∞—Ç–∞:</b> ${reservationData.date}
üïê <b>–í—Ä–µ–º—è:</b> ${reservationData.time}
üë• <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π:</b> ${reservationData.guests}
${reservationData.comment ? `üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> ${reservationData.comment}` : ''}

‚è∞ –í—Ä–µ–º—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ${new Date().toLocaleString('ru-RU', { timeZone: 'Asia/Dushanbe' })}
    `.trim(),
    parse_mode: 'HTML' as const,
  };

  return await sendTelegramMessage(message);
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π —Ñ–æ—Ä–º—ã –¥–ª—è Telegram
export async function sendContactFormToTelegram(contactData: {
  name: string;
  phone?: string;
  email?: string;
  subject?: string;
  message: string;
}): Promise<boolean> {
  const message = {
    text: `
üìù <b>–ù–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï</b>

üë§ <b>–ò–º—è:</b> ${contactData.name}
${contactData.phone ? `üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${contactData.phone}` : ''}
${contactData.email ? `üìß <b>Email:</b> ${contactData.email}` : ''}
${contactData.subject ? `üìå <b>–¢–µ–º–∞:</b> ${contactData.subject}` : ''}

üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>
${contactData.message}

‚è∞ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: ${new Date().toLocaleString('ru-RU', { timeZone: 'Asia/Dushanbe' })}
    `.trim(),
    parse_mode: 'HTML' as const,
  };

  return await sendTelegramMessage(message);
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ —Å–≤–∞–¥–µ–±–Ω—ã–π –∑–∞–ª –¥–ª—è Telegram
export async function sendWeddingHallRequestToTelegram(weddingData: {
  customerName: string;
  customerPhone: string;
  customerEmail?: string;
  eventDate: string;
  eventTime: string;
  guestCount: number;
  eventType: string;
  budget?: string;
  additionalServices?: string[];
  comment?: string;
}): Promise<boolean> {
  const servicesList = weddingData.additionalServices && weddingData.additionalServices.length > 0
    ? weddingData.additionalServices.map(service => `‚Ä¢ ${service}`).join('\n')
    : '–ù–µ —É–∫–∞–∑–∞–Ω—ã';

  const message = {
    text: `
üíí <b>–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê –°–í–ê–î–ï–ë–ù–´–ô –ó–ê–õ</b>

üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> ${weddingData.customerName}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${weddingData.customerPhone}
${weddingData.customerEmail ? `üìß <b>Email:</b> ${weddingData.customerEmail}` : ''}

üìÖ <b>–î–∞—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:</b> ${weddingData.eventDate}
üïê <b>–í—Ä–µ–º—è:</b> ${weddingData.eventTime}
üë• <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π:</b> ${weddingData.guestCount}
üéâ <b>–¢–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:</b> ${weddingData.eventType}
${weddingData.budget ? `üí∞ <b>–ë—é–¥–∂–µ—Ç:</b> ${weddingData.budget}` : ''}

üõéÔ∏è <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏:</b>
${servicesList}

${weddingData.comment ? `üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> ${weddingData.comment}` : ''}

‚è∞ –í—Ä–µ–º—è –∑–∞—è–≤–∫–∏: ${new Date().toLocaleString('ru-RU', { timeZone: 'Asia/Dushanbe' })}
    `.trim(),
    parse_mode: 'HTML' as const,
  };

  return await sendTelegramMessage(message);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–≤–æ–Ω–∫–∞ (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å)
export function callPhone() {
  const phoneNumber = '+992111307777';
  
  if (typeof window !== 'undefined' && window.Telegram?.WebApp) {
    window.Telegram.WebApp.openTelegramLink(`tel:${phoneNumber}`);
  } else {
    window.open(`tel:${phoneNumber}`, '_blank');
  }
}

export const telegramService = {
  sendOrderToTelegram,
  sendReservationToTelegram,
  sendContactFormToTelegram,
  sendWeddingHallRequestToTelegram,
  callPhone,
}; 