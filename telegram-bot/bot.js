const TelegramBot = require('node-telegram-bot-api');
require('dotenv').config({ path: './config.env' });

// Bot configuration
const token = process.env.BOT_TOKEN || '8489499457:AAEYJsk8jN3qynY2J4DoPSlqU1ghMdwlbSQ';
const webappUrl = process.env.WEBAPP_URL || 'https://telegram.forelrest.com';

// Create bot instance
const bot = new TelegramBot(token, { polling: true });

console.log('ü§ñ Telegram bot started...');

// Handle /start command
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  const firstName = msg.from.first_name || '–ì–æ—Å—Ç—å';
  const username = msg.from.username || '–ù–µ —É–∫–∞–∑–∞–Ω';
  
  // Log user info for admin setup
  console.log(`üë§ User started bot: ${firstName} (@${username}) - Chat ID: ${chatId}`);
  
  try {
    await bot.sendMessage(chatId, 
      `–ê—Å—Å–∞–ª—è–º—É –ê–ª–µ–π–∫—É–º, ${firstName}! üëã\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —Ä–µ—Å—Ç–æ—Ä–∞–Ω! üçΩ\n\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é üìã\n‚Ä¢ –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ üõí\n‚Ä¢ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫ üçΩ\n‚Ä¢ –£–∑–Ω–∞—Ç—å –æ –Ω–∞—Å ‚ÑπÔ∏è\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:`, 
      {
        reply_markup: {
          inline_keyboard: [
            [{
              text: 'üçΩ –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é',
              web_app: { url: webappUrl }
            }],
            [{
              text: '‚≠ê –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤',
              callback_data: 'leave_review'
            }]
          ]
        }
      }
    );
    
    console.log(`‚úÖ Welcome message sent to chat ${chatId}`);
  } catch (error) {
    console.error('‚ùå Error sending welcome message:', error);
  }
});

// Store user states for review collection
const userStates = new Map();

// Handle callback queries
bot.on('callback_query', async (callbackQuery) => {
  const chatId = callbackQuery.message.chat.id;
  const data = callbackQuery.data;

  if (data === 'leave_review') {
    try {
      // Set user state to waiting for review
      userStates.set(chatId, 'waiting_for_review');
      
      await bot.sendMessage(chatId, 
        `–°–ø–∞—Å–∏–±–æ –∑–∞ –∂–µ–ª–∞–Ω–∏–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤! üåü\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –æ –Ω–∞—à–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ. –ú—ã —Ü–µ–Ω–∏–º –∫–∞–∂–¥–æ–µ –º–Ω–µ–Ω–∏–µ –Ω–∞—à–∏—Ö –≥–æ—Å—Ç–µ–π! üôè\n\n–í–∞—à –æ—Ç–∑—ã–≤ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å—Ç–∞—Ç—å –µ—â–µ –ª—É—á—à–µ.\n\n–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.`,
        {
          reply_markup: {
            inline_keyboard: [
              [{
                text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å',
                callback_data: 'cancel_review'
              }]
            ]
          }
        }
      );
      
      console.log(`‚úÖ Review request sent to chat ${chatId}`);
    } catch (error) {
      console.error('‚ùå Error sending review request:', error);
    }
  }
  
  if (data === 'cancel_review') {
    try {
      // Clear user state
      userStates.delete(chatId);
      
      await bot.sendMessage(chatId, 
        `–û—Ç–∑—ã–≤ –æ—Ç–º–µ–Ω–µ–Ω. –ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –ø–æ–∑–∂–µ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "‚≠ê –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.`,
        {
          reply_markup: {
            inline_keyboard: [
              [{
                text: 'üçΩ –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é',
                web_app: { url: webappUrl }
              }]
            ]
          }
        }
      );
      
      console.log(`‚úÖ Review cancelled for chat ${chatId}`);
    } catch (error) {
      console.error('‚ùå Error cancelling review:', error);
    }
  }
});

// Handle text messages (for reviews)
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;
  
  // Skip if it's a command or web app data
  if (msg.text && msg.text.startsWith('/')) return;
  if (msg.web_app_data) return;
  
  // Check if user is waiting for review
  const userState = userStates.get(chatId);
  
  if (userState === 'waiting_for_review' && text) {
    try {
      // Clear user state
      userStates.delete(chatId);
      
      // Send confirmation to user
      await bot.sendMessage(chatId, 
        `‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! üåü\n\n–í–∞—à –æ—Ç–∑—ã–≤:\n"${text}"\n\n–ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É—á—Ç–µ–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ –∏ –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è —Å—Ç–∞—Ç—å –µ—â–µ –ª—É—á—à–µ! üôè\n\n–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—à —Ä–µ—Å—Ç–æ—Ä–∞–Ω! ‚ù§Ô∏è`,
        {
          reply_markup: {
            inline_keyboard: [
              [{
                text: 'üçΩ –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é',
                web_app: { url: webappUrl }
              }]
            ]
          }
        }
      );
      
      // Send review to admin
      await sendReviewToAdmin(chatId, msg.from, text);
      
      console.log(`‚úÖ Review received from chat ${chatId}`);
    } catch (error) {
      console.error('‚ùå Error processing review:', error);
      await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  }
});

// Handle web app data (when user submits order from mini-app)
bot.on('web_app_data', async (msg) => {
  const chatId = msg.chat.id;
  const webAppData = msg.web_app_data;
  
  try {
    console.log('üì± Received web app data:', webAppData);
    
    // Parse the data (assuming it's JSON)
    const orderData = JSON.parse(webAppData.data);
    
    // Send order confirmation to user
    await sendOrderConfirmation(chatId, orderData);
    
  } catch (error) {
    console.error('‚ùå Error processing web app data:', error);
    await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
});

// Function to send order confirmation to user
async function sendOrderConfirmation(chatId, orderData) {
  try {
    const { items, total, delivery_method, delivery_address, customer_name, payment_method, comment } = orderData;
    
    let message = `‚úÖ <b>–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!</b>\n\n`;
    message += `üë§ <b>–ò–º—è:</b> ${customer_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`;
    message += `üì¶ <b>–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:</b> ${delivery_method}\n`;
    
    if (delivery_address) {
      message += `üìç <b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> ${delivery_address}\n`;
    }
    
    message += `üí≥ <b>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b> ${payment_method}\n`;
    
    if (comment) {
      message += `üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> ${comment}\n`;
    }
    
    message += `\nüçΩ <b>–ó–∞–∫–∞–∑–∞–Ω–Ω—ã–µ –±–ª—é–¥–∞:</b>\n`;
    
    items.forEach(item => {
      const itemTotal = item.price * item.quantity;
      message += `‚Ä¢ ${getRussianDishName(item.name)} x${item.quantity} - ${itemTotal} TJS\n`;
    });
    
    message += `\nüí∞ <b>–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ:</b> ${total} TJS\n\n`;
    message += `‚è∞ <b>–í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞:</b> ${new Date().toLocaleString('ru-RU')}\n\n`;
    message += `–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. üôè`;
    
    await bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
    console.log(`‚úÖ Order confirmation sent to chat ${chatId}`);
    
  } catch (error) {
    console.error('‚ùå Error sending order confirmation:', error);
    await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.');
  }
}

// Function to send review to admin
async function sendReviewToAdmin(userChatId, user, reviewText) {
  try {
    // Admin chat ID - replace with actual admin chat ID
    const adminChatId = process.env.ADMIN_CHAT_ID || '123456789'; // Replace with actual admin chat ID
    
    const userName = user.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
    const userLastName = user.last_name || '';
    const userUsername = user.username ? `@${user.username}` : '–ù–µ —É–∫–∞–∑–∞–Ω';
    
    let adminMessage = `üìù <b>–ù–û–í–´–ô –û–¢–ó–´–í –û–¢ –ö–õ–ò–ï–ù–¢–ê</b>\n\n`;
    adminMessage += `üë§ <b>–ò–º—è:</b> ${userName} ${userLastName}\n`;
    adminMessage += `üÜî <b>Username:</b> ${userUsername}\n`;
    adminMessage += `üí¨ <b>Chat ID:</b> ${userChatId}\n`;
    adminMessage += `üìÖ <b>–î–∞—Ç–∞:</b> ${new Date().toLocaleString('ru-RU')}\n\n`;
    adminMessage += `üí≠ <b>–û—Ç–∑—ã–≤:</b>\n"${reviewText}"\n\n`;
    adminMessage += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`;
    
    await bot.sendMessage(adminChatId, adminMessage, { parse_mode: 'HTML' });
    console.log(`‚úÖ Review sent to admin from chat ${userChatId}`);
    
  } catch (error) {
    console.error('‚ùå Error sending review to admin:', error);
  }
}

// Function to get Russian dish name
function getRussianDishName(dishName) {
  const englishToRussian = {
    'Grilled Trout': '–§–æ—Ä–µ–ª—å –Ω–∞ –≥—Ä–∏–ª–µ',
    'Salmon Steak': '–°—Ç–µ–π–∫ –∏–∑ –ª–æ—Å–æ—Å—è',
    'Salt-Baked Dorado': '–î–æ—Ä–∞–¥–æ –≤ —Å–æ–ª–∏',
    'Sea Bass': '–ú–æ—Ä—Å–∫–æ–π –æ–∫—É–Ω—å',
    'Seafood Paella': '–ü–∞—ç–ª—å—è —Å –º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç–∞–º–∏',
    'Shrimp Ceviche': '–°–µ–≤–∏—á–µ –∏–∑ –∫—Ä–µ–≤–µ—Ç–æ–∫',
    'Tuna Tartare': '–¢–∞—Ä—Ç–∞—Ä –∏–∑ —Ç—É–Ω—Ü–∞',
    'Trout Salad': '–°–∞–ª–∞—Ç —Å —Ñ–æ—Ä–µ–ª—å—é',
    'Caesar with Shrimp': '–¶–µ–∑–∞—Ä—å —Å –∫—Ä–µ–≤–µ—Ç–∫–∞–º–∏',
    'Fresh Juice': '–°–≤–µ–∂–µ–≤—ã–∂–∞—Ç—ã–π —Å–æ–∫',
    'Lemonade': '–õ–∏–º–æ–Ω–∞–¥',
    'Caesar with Chicken': '–¶–µ–∑–∞—Ä—å —Å –∫—É—Ä–∏—Ü–µ–π',
    'Greek Salad': '–ì—Ä–µ—á–µ—Å–∫–∏–π —Å–∞–ª–∞—Ç',
    'Caprese': '–ö–∞–ø—Ä–µ–∑–µ',
    'Olivier': '–û–ª–∏–≤—å–µ',
    'Beetroot Salad': '–°–∞–ª–∞—Ç –∏–∑ —Å–≤–µ–∫–ª—ã',
    'Crab Salad': '–°–∞–ª–∞—Ç —Å –∫—Ä–∞–±–æ–º',
    'Shrimp Salad': '–°–∞–ª–∞—Ç —Å –∫—Ä–µ–≤–µ—Ç–∫–∞–º–∏',
    'Tuna Salad': '–°–∞–ª–∞—Ç —Å —Ç—É–Ω—Ü–æ–º',
    'Salmon Salad': '–°–∞–ª–∞—Ç —Å –ª–æ—Å–æ—Å–µ–º',
    'Avocado Salad': '–°–∞–ª–∞—Ç —Å –∞–≤–æ–∫–∞–¥–æ',
    'Quinoa Salad': '–°–∞–ª–∞—Ç —Å –∫–∏–Ω–æ–∞',
    'Fruit Salad': '–§—Ä—É–∫—Ç–æ–≤—ã–π —Å–∞–ª–∞—Ç',
    'Vegetable Salad': '–û–≤–æ—â–Ω–æ–π —Å–∞–ª–∞—Ç',
    'Chicken Salad': '–°–∞–ª–∞—Ç —Å –∫—É—Ä–∏—Ü–µ–π',
    'Beef Salad': '–°–∞–ª–∞—Ç —Å –≥–æ–≤—è–¥–∏–Ω–æ–π',
    'Lamb Salad': '–°–∞–ª–∞—Ç —Å –±–∞—Ä–∞–Ω–∏–Ω–æ–π',
    'Duck Salad': '–°–∞–ª–∞—Ç —Å —É—Ç–∫–æ–π',
    'Turkey Salad': '–°–∞–ª–∞—Ç —Å –∏–Ω–¥–µ–π–∫–æ–π',
    'Pork Salad': '–°–∞–ª–∞—Ç —Å–æ —Å–≤–∏–Ω–∏–Ω–æ–π',
    'Fish Soup': '–£—Ö–∞',
    'Borsch': '–ë–æ—Ä—â',
    'Kharcho': '–•–∞—Ä—á–æ',
    'Lentil Soup': '–ß–µ—á–µ–≤–∏—á–Ω—ã–π —Å—É–ø',
    'Mushroom Soup': '–ì—Ä–∏–±–Ω–æ–π —Å—É–ø',
    'Chicken Soup': '–ö—É—Ä–∏–Ω—ã–π —Å—É–ø',
    'Beef Soup': '–ì–æ–≤—è–∂–∏–π —Å—É–ø',
    'Lamb Soup': '–ë–∞—Ä–∞–Ω–∏–π —Å—É–ø',
    'Duck Soup': '–£—Ç–∏–Ω—ã–π —Å—É–ø',
    'Turkey Soup': '–ò–Ω–¥—é—à–∏–Ω—ã–π —Å—É–ø',
    'Pork Soup': '–°–≤–∏–Ω–æ–π —Å—É–ø',
    'Meat Fillet with Mushrooms': '–ú—è—Å–Ω–æ–µ —Ñ–∏–ª–µ —Å –≥—Ä–∏–±–∞–º–∏',
    'Beef Steak': '–ì–æ–≤—è–∂–∏–π —Å—Ç–µ–π–∫',
    'Lamb Chops': '–ë–∞—Ä–∞–Ω—å–∏ –æ—Ç–±–∏–≤–Ω—ã–µ',
    'Pork Cutlet': '–°–≤–∏–Ω–∞—è –æ—Ç–±–∏–≤–Ω–∞—è',
    'Chicken Breast': '–ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞',
    'Duck Breast': '–£—Ç–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞',
    'Turkey Breast': '–ò–Ω–¥—é—à–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞',
    'Veal Cutlet': '–¢–µ–ª—è—á—å—è –æ—Ç–±–∏–≤–Ω–∞—è',
    'Lamb Fillet': '–ë–∞—Ä–∞–Ω–∏–π —Ñ–∏–ª–µ–π',
    'Pork Fillet': '–°–≤–∏–Ω–æ–π —Ñ–∏–ª–µ–π',
    'Beef Fillet': '–ì–æ–≤—è–∂–∏–π —Ñ–∏–ª–µ–π',
    'Chicken Fillet': '–ö—É—Ä–∏–Ω—ã–π —Ñ–∏–ª–µ–π',
    'Duck Fillet': '–£—Ç–∏–Ω—ã–π —Ñ–∏–ª–µ–π',
    'Turkey Fillet': '–ò–Ω–¥—é—à–∏–Ω—ã–π —Ñ–∏–ª–µ–π',
    'Veal Fillet': '–¢–µ–ª—è—á–∏–π —Ñ–∏–ª–µ–π',
    'Lamb Steak': '–ë–∞—Ä–∞–Ω–∏–π —Å—Ç–µ–π–∫',
    'Pork Steak': '–°–≤–∏–Ω–æ–π —Å—Ç–µ–π–∫',
    'Chicken Steak': '–ö—É—Ä–∏–Ω—ã–π —Å—Ç–µ–π–∫',
    'Duck Steak': '–£—Ç–∏–Ω—ã–π —Å—Ç–µ–π–∫',
    'Turkey Steak': '–ò–Ω–¥—é—à–∏–Ω—ã–π —Å—Ç–µ–π–∫',
    'Veal Steak': '–¢–µ–ª—è—á–∏–π —Å—Ç–µ–π–∫',
    'Grilled Salmon': '–õ–æ—Å–æ—Å—å –Ω–∞ –≥—Ä–∏–ª–µ',
    'Baked Trout': '–ó–∞–ø–µ—á–µ–Ω–Ω–∞—è —Ñ–æ—Ä–µ–ª—å',
    'Fried Dorado': '–ñ–∞—Ä–µ–Ω–∞—è –¥–æ—Ä–∞–¥–æ',
    'Steamed Sea Bass': '–ú–æ—Ä—Å–∫–æ–π –æ–∫—É–Ω—å –Ω–∞ –ø–∞—Ä—É',
    'Smoked Salmon': '–ö–æ–ø—á–µ–Ω—ã–π –ª–æ—Å–æ—Å—å',
    'Caviar': '–ò–∫—Ä–∞',
    'Oysters': '–£—Å—Ç—Ä–∏—Ü—ã',
    'Mussels': '–ú–∏–¥–∏–∏',
    'Carbonara': '–ö–∞—Ä–±–æ–Ω–∞—Ä–∞',
    'Bolognese': '–ë–æ–ª–æ–Ω—å–µ–∑–µ',
    'Alfredo': '–ê–ª—å—Ñ—Ä–µ–¥–æ',
    'Pesto': '–ü–µ—Å—Ç–æ',
    'Marinara': '–ú–∞—Ä–∏–Ω–∞—Ä–∞',
    'Bruschetta': '–ë—Ä—É—Å–∫–µ—Ç—Ç–∞',
    'Carpaccio': '–ö–∞—Ä–ø–∞—á—á–æ',
    'Tartare': '–¢–∞—Ä—Ç–∞—Ä',
    'Rice': '–†–∏—Å',
    'Buckwheat': '–ì—Ä–µ—á–∫–∞',
    'Mashed Potatoes': '–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å–Ω–æ–µ –ø—é—Ä–µ',
    'French Fries': '–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å —Ñ—Ä–∏',
    'Grilled Vegetables': '–û–≤–æ—â–∏ –Ω–∞ –≥—Ä–∏–ª–µ',
    'Steamed Vegetables': '–û–≤–æ—â–∏ –Ω–∞ –ø–∞—Ä—É',
    'Roasted Potatoes': '–ñ–∞—Ä–µ–Ω—ã–π –∫–∞—Ä—Ç–æ—Ñ–µ–ª—å',
    'Boiled Potatoes': '–û—Ç–≤–∞—Ä–Ω–æ–π –∫–∞—Ä—Ç–æ—Ñ–µ–ª—å',
    'Beef Cutlet': '–ì–æ–≤—è–∂—å—è –∫–æ—Ç–ª–µ—Ç–∞',
    'Chicken Cutlet': '–ö—É—Ä–∏–Ω–∞—è –∫–æ—Ç–ª–µ—Ç–∞',
    'Pork Cutlet': '–°–≤–∏–Ω–∞—è –∫–æ—Ç–ª–µ—Ç–∞',
    'Lamb Cutlet': '–ë–∞—Ä–∞–Ω—å—è –∫–æ—Ç–ª–µ—Ç–∞',
    'Beef Ribs': '–ì–æ–≤—è–∂—å–∏ —Ä–µ–±—Ä–∞',
    'Pork Ribs': '–°–≤–∏–Ω—ã–µ —Ä–µ–±—Ä–∞',
    'Lamb Ribs': '–ë–∞—Ä–∞–Ω—å–∏ —Ä–µ–±—Ä–∞',
    'Beef Kaila': '–ì–æ–≤—è–∂—å—è –∫–∞–π–ª–∞',
    'Pork Kaila': '–°–≤–∏–Ω–∞—è –∫–∞–π–ª–∞',
    'Lamb Kaila': '–ë–∞—Ä–∞–Ω—å—è –∫–∞–π–ª–∞',
    'Beef Steak': '–ì–æ–≤—è–∂–∏–π —Å—Ç–µ–π–∫',
    'Chicken Steak': '–ö—É—Ä–∏–Ω—ã–π —Å—Ç–µ–π–∫',
    'Pork Steak': '–°–≤–∏–Ω–æ–π —Å—Ç–µ–π–∫',
    'Lamb Steak': '–ë–∞—Ä–∞–Ω–∏–π —Å—Ç–µ–π–∫',
    'Duck Steak': '–£—Ç–∏–Ω—ã–π —Å—Ç–µ–π–∫',
    'Turkey Steak': '–ò–Ω–¥—é—à–∏–Ω—ã–π —Å—Ç–µ–π–∫',
    'Veal Steak': '–¢–µ–ª—è—á–∏–π —Å—Ç–µ–π–∫',
    'Fish Steak': '–†—ã–±–Ω—ã–π —Å—Ç–µ–π–∫',
    'Beef Kebab': '–ì–æ–≤—è–∂–∏–π —à–∞—à–ª—ã–∫',
    'Lamb Kebab': '–ë–∞—Ä–∞–Ω–∏–π —à–∞—à–ª—ã–∫',
    'Chicken Kebab': '–ö—É—Ä–∏–Ω—ã–π —à–∞—à–ª—ã–∫',
    'Pork Kebab': '–°–≤–∏–Ω–æ–π —à–∞—à–ª—ã–∫',
    'Fish Kebab': '–†—ã–±–Ω—ã–π —à–∞—à–ª—ã–∫',
    'Shrimp Kebab': '–ö—Ä–µ–≤–µ—Ç–æ—á–Ω—ã–π —à–∞—à–ª—ã–∫',
    'Vegetable Kebab': '–û–≤–æ—â–Ω–æ–π —à–∞—à–ª—ã–∫',
    'Mushroom Kebab': '–ì—Ä–∏–±–Ω–æ–π —à–∞—à–ª—ã–∫',
    'Special Order': '–°–ø–µ—Ü–∑–∞–∫–∞–∑',
    'Custom Dish': '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –±–ª—é–¥–æ',
    'Chef Special': '–§–∏—Ä–º–µ–Ω–Ω–æ–µ –±–ª—é–¥–æ —à–µ—Ñ-–ø–æ–≤–∞—Ä–∞'
  };

  // If name is already in Russian, return as is
  if (Object.values(englishToRussian).includes(dishName)) {
    return dishName;
  }

  // If it's English name, translate to Russian
  return englishToRussian[dishName] || dishName;
}

// Handle errors
bot.on('error', (error) => {
  console.error('‚ùå Bot error:', error);
});

bot.on('polling_error', (error) => {
  console.error('‚ùå Polling error:', error);
});

// Graceful shutdown
process.on('SIGINT', () => {
  console.log('\nüõë Shutting down bot...');
  bot.stopPolling();
  process.exit(0);
});

process.on('SIGTERM', () => {
  console.log('\nüõë Shutting down bot...');
  bot.stopPolling();
  process.exit(0);
});

console.log('‚úÖ Bot is running and listening for messages...'); 